# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.db.models.deletion
from django.conf import settings
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('brand_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=127)),
            ],
            options={
                'db_table': 'ec_brands',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Comic',
            fields=[
                ('comic_id', models.AutoField(serialize=False, primary_key=True)),
                ('is_cgc_rated', models.BooleanField(default=False)),
                ('age', models.PositiveSmallIntegerField(choices=[(1, 'Gold'), (2, 'Silver'), (3, 'Bronze'), (4, 'Copper')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)], blank=True, null=True)),
                ('cgc_rating', models.FloatField(choices=[(10.0, 'Gem Mint'), (9.9, 'Mint'), (9.8, 'Near Mint/Mintt'), (9.6, 'Near Mint +'), (9.4, 'Near Mint'), (9.2, 'Near Mint -'), (9.0, 'Very Fine/Near Mint'), (8.5, 'Very Fine +'), (8.0, 'Very Fine'), (7.5, 'Very Fine -'), (7.0, 'Fine/Very Fine'), (6.5, 'Fine +'), (6.0, 'Fine'), (5.5, 'Fine -'), (5.0, 'Very Good/Fine'), (4.5, 'Very Good +'), (4.0, 'Very Good'), (3.5, 'Very Good -'), (3.0, 'Good/Very Good'), (2.5, 'Good +'), (2.0, 'Good'), (1.8, 'Good -'), (1.5, 'Fair/Good'), (1.0, 'Fair'), (0.5, 'Poor')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], blank=True, null=True)),
                ('label_colour', models.CharField(choices=[('Purple', 'Purple'), ('Red', 'Red'), ('Blue', 'Blue'), ('Yellow', 'Yellow')], max_length=63, blank=True, null=True)),
                ('condition_rating', models.PositiveSmallIntegerField(choices=[(10, 'Near Mint'), (8, 'Very Fine'), (6, 'Fine'), (4, 'Very Good'), (2, 'Good'), (1, 'Fair'), (0, 'Poor')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], blank=True, null=True)),
                ('is_canadian_priced_variant', models.BooleanField(default=False)),
                ('is_variant_cover', models.BooleanField(default=False)),
                ('is_retail_incentive_variant', models.BooleanField(default=False)),
                ('is_newsstand_edition', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'ec_comics',
                'ordering': ('issue',),
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.AutoField(serialize=False, primary_key=True)),
                ('joined', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(max_length=63)),
                ('last_name', models.CharField(max_length=63)),
                ('email', models.EmailField(max_length=254, unique=True, blank=True, null=True)),
                ('billing_name', models.CharField(max_length=126)),
                ('billing_phone', models.CharField(max_length=15, blank=True, null=True)),
                ('billing_street_name', models.CharField(max_length=63)),
                ('billing_street_number', models.CharField(max_length=15)),
                ('billing_unit_number', models.CharField(max_length=15, blank=True, null=True)),
                ('billing_city', models.CharField(max_length=63)),
                ('billing_province', models.CharField(max_length=63)),
                ('billing_country', models.CharField(max_length=63)),
                ('billing_postal', models.CharField(max_length=31)),
                ('shipping_name', models.CharField(max_length=126)),
                ('shipping_phone', models.CharField(max_length=15, blank=True, null=True)),
                ('shipping_street_name', models.CharField(max_length=63)),
                ('shipping_street_number', models.CharField(max_length=15)),
                ('shipping_unit_number', models.CharField(max_length=15, blank=True, null=True)),
                ('shipping_city', models.CharField(max_length=63)),
                ('shipping_province', models.CharField(max_length=63)),
                ('shipping_country', models.CharField(max_length=63)),
                ('shipping_postal', models.CharField(max_length=31)),
                ('has_consented', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'ec_customers',
                'ordering': ('last_name', 'first_name'),
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('employee_id', models.AutoField(serialize=False, primary_key=True)),
                ('role', models.PositiveSmallIntegerField(choices=[(0, 'Owner'), (1, 'Manager'), (2, 'Worker')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], default=0)),
                ('joined', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('street_name', models.CharField(max_length=63)),
                ('street_number', models.CharField(max_length=15)),
                ('unit_number', models.CharField(max_length=15, blank=True, null=True)),
                ('city', models.CharField(max_length=63)),
                ('province', models.CharField(max_length=63)),
                ('country', models.CharField(max_length=63)),
                ('postal', models.CharField(max_length=31)),
                ('email', models.EmailField(max_length=254, blank=True, null=True)),
                ('phone', models.CharField(max_length=15, blank=True, null=True)),
            ],
            options={
                'db_table': 'ec_employees',
                'ordering': ('employee_id',),
            },
        ),
        migrations.CreateModel(
            name='GCDBrand',
            fields=[
                ('brand_id', models.AutoField(serialize=False, primary_key=True)),
                ('issue_count', models.IntegerField(default=0)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('year_began', models.IntegerField(db_index=True, null=True)),
                ('year_ended', models.IntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(db_index=True)),
                ('year_ended_uncertain', models.BooleanField(db_index=True)),
                ('notes', models.TextField()),
                ('keywords', models.TextField(null=True)),
                ('url', models.URLField(blank=True, default='', max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'db_table': 'gcd_brands',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GCDBrandEmblemGroup',
            fields=[
                ('brand_emblem_group_id', models.AutoField(serialize=False, primary_key=True)),
                ('brand', models.ForeignKey(to='api.GCDBrand', null=True)),
            ],
            options={
                'db_table': 'gcd_brand_emblem_groups',
                'ordering': ('brand',),
            },
        ),
        migrations.CreateModel(
            name='GCDBrandGroup',
            fields=[
                ('brand_group_id', models.AutoField(serialize=False, primary_key=True)),
                ('issue_count', models.IntegerField(default=0)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('year_began', models.IntegerField(db_index=True, null=True)),
                ('year_ended', models.IntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(db_index=True)),
                ('year_ended_uncertain', models.BooleanField(db_index=True)),
                ('notes', models.TextField()),
                ('keywords', models.TextField(null=True)),
                ('url', models.URLField(blank=True, default='', max_length=255)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'db_table': 'gcd_brand_groups',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GCDBrandUse',
            fields=[
                ('brand_use_id', models.AutoField(serialize=False, primary_key=True)),
                ('year_began', models.IntegerField(db_index=True, null=True)),
                ('year_ended', models.IntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(db_index=True)),
                ('year_ended_uncertain', models.BooleanField(db_index=True)),
                ('notes', models.TextField()),
                ('reserved', models.BooleanField(db_index=True, default=0)),
                ('created', models.DateField(auto_now_add=True)),
                ('modified', models.DateField(auto_now=True)),
                ('emblem', models.ForeignKey(to='api.GCDBrand', related_name='in_use')),
            ],
            options={
                'db_table': 'gcd_brand_uses',
                'ordering': ('publisher',),
            },
        ),
        migrations.CreateModel(
            name='GCDCountry',
            fields=[
                ('country_id', models.AutoField(serialize=False, primary_key=True)),
                ('code', models.CharField(unique=True, max_length=10)),
                ('name', models.CharField(db_index=True, max_length=255)),
            ],
            options={
                'db_table': 'gcd_countries',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GCDImage',
            fields=[
                ('image_id', models.AutoField(serialize=False, primary_key=True)),
                ('type', models.CharField(db_index=True, max_length=255)),
                ('file', models.FileField(upload_to='uploads', null=True)),
            ],
            options={
                'db_table': 'gcd_images',
            },
        ),
        migrations.CreateModel(
            name='GCDIndiciaPublisher',
            fields=[
                ('indicia_publisher_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('year_began', models.PositiveSmallIntegerField(db_index=True, null=True)),
                ('year_ended', models.PositiveSmallIntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(db_index=True, default=False)),
                ('year_ended_uncertain', models.BooleanField(db_index=True, default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('url', models.URLField(max_length=255, blank=True, default='', null=True)),
                ('is_surrogate', models.BooleanField(db_index=True)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('imprint_count', models.IntegerField(default=0)),
                ('brand_count', models.IntegerField(db_index=True, default=0)),
                ('indicia_publisher_count', models.IntegerField(db_index=True, default=0)),
                ('series_count', models.IntegerField(default=0)),
                ('issue_count', models.IntegerField(default=0)),
                ('country', models.ForeignKey(to='api.GCDCountry')),
                ('images', models.ManyToManyField(to='api.GCDImage')),
            ],
            options={
                'db_table': 'gcd_indicia_publishers',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GCDIssue',
            fields=[
                ('issue_id', models.AutoField(serialize=False, primary_key=True)),
                ('number', models.CharField(db_index=True, max_length=50)),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('no_title', models.BooleanField(db_index=True, default=False)),
                ('volume', models.CharField(db_index=True, max_length=50)),
                ('no_volume', models.BooleanField(db_index=True, default=False)),
                ('display_volume_with_number', models.BooleanField(db_index=True, default=False)),
                ('isbn', models.CharField(db_index=True, max_length=32)),
                ('no_isbn', models.BooleanField(db_index=True, default=False)),
                ('valid_isbn', models.CharField(db_index=True, max_length=13)),
                ('variant_of_id', models.IntegerField(db_index=True, default=0)),
                ('variant_name', models.CharField(max_length=255)),
                ('barcode', models.CharField(db_index=True, max_length=38)),
                ('no_barcode', models.BooleanField(default=False)),
                ('rating', models.CharField(db_index=True, default='', max_length=255)),
                ('no_rating', models.BooleanField(db_index=True, default=False)),
                ('is_first_issue', models.BooleanField(default=False)),
                ('is_last_issue', models.BooleanField(default=False)),
                ('publication_date', models.CharField(max_length=255)),
                ('key_date', models.CharField(db_index=True, max_length=10)),
                ('on_sale_date', models.CharField(db_index=True, max_length=10)),
                ('on_sale_date_uncertain', models.BooleanField(default=False)),
                ('sort_code', models.IntegerField(db_index=True)),
                ('indicia_frequency', models.CharField(max_length=255)),
                ('no_indicia_frequency', models.BooleanField(db_index=True, default=False)),
                ('price', models.CharField(max_length=255)),
                ('page_count', models.DecimalField(max_digits=10, decimal_places=3, null=True)),
                ('page_count_uncertain', models.BooleanField(default=False)),
                ('editing', models.TextField()),
                ('no_editing', models.BooleanField(db_index=True, default=False)),
                ('notes', models.TextField(null=True)),
                ('keywords', models.TextField(null=True)),
                ('is_indexed', models.IntegerField(db_index=True, default=0)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(db_index=True, auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('indicia_pub_not_printed', models.BooleanField(default=False)),
                ('no_brand', models.BooleanField(db_index=True, default=False)),
                ('small_url', models.URLField(max_length=255, blank=True, null=True)),
                ('medium_url', models.URLField(max_length=255, blank=True, null=True)),
                ('large_url', models.URLField(max_length=255, blank=True, null=True)),
                ('alt_small_url', models.URLField(max_length=255, blank=True, null=True)),
                ('alt_medium_url', models.URLField(max_length=255, blank=True, null=True)),
                ('alt_large_url', models.URLField(max_length=255, blank=True, null=True)),
                ('has_alternative', models.BooleanField(default=False)),
                ('publisher_name', models.CharField(db_index=True, max_length=255)),
                ('genre', models.CharField(max_length=255, db_index=True, blank=True, null=True)),
                ('brand', models.ForeignKey(to='api.GCDBrand', null=True)),
                ('images', models.ManyToManyField(to='api.GCDImage')),
                ('indicia_publisher', models.ForeignKey(to='api.GCDIndiciaPublisher', null=True)),
            ],
            options={
                'db_table': 'gcd_issues',
                'ordering': ['series', 'sort_code'],
            },
        ),
        migrations.CreateModel(
            name='GCDLanguage',
            fields=[
                ('language_id', models.AutoField(serialize=False, primary_key=True)),
                ('code', models.CharField(unique=True, max_length=10)),
                ('name', models.CharField(db_index=True, max_length=255)),
            ],
            options={
                'db_table': 'gcd_languages',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GCDPublisher',
            fields=[
                ('publisher_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('year_began', models.PositiveSmallIntegerField(db_index=True, null=True)),
                ('year_ended', models.PositiveSmallIntegerField(null=True)),
                ('year_began_uncertain', models.BooleanField(db_index=True, default=False)),
                ('year_ended_uncertain', models.BooleanField(db_index=True, default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('url', models.URLField(max_length=255, blank=True, default='', null=True)),
                ('is_master', models.BooleanField(db_index=True, default=False)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('imprint_count', models.IntegerField(default=0)),
                ('brand_count', models.IntegerField(db_index=True, default=0)),
                ('indicia_publisher_count', models.IntegerField(db_index=True, default=0)),
                ('series_count', models.IntegerField(default=0)),
                ('issue_count', models.IntegerField(default=0)),
                ('country', models.ForeignKey(to='api.GCDCountry')),
                ('images', models.ManyToManyField(to='api.GCDImage')),
                ('parent', models.ForeignKey(to='api.GCDPublisher', related_name='imprint_set', null=True)),
            ],
            options={
                'db_table': 'gcd_publishers',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GCDSeries',
            fields=[
                ('series_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('sort_name', models.CharField(db_index=True, max_length=255)),
                ('format', models.CharField(default='', max_length=255)),
                ('color', models.CharField(default='', max_length=255)),
                ('dimensions', models.CharField(default='', max_length=255)),
                ('paper_stock', models.CharField(default='', max_length=255)),
                ('binding', models.CharField(default='', max_length=255)),
                ('publishing_format', models.CharField(default='', max_length=255)),
                ('tracking_notes', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('publication_notes', models.TextField(blank=True, null=True)),
                ('keywords', models.TextField(blank=True, null=True)),
                ('year_began', models.IntegerField(db_index=True)),
                ('year_ended', models.IntegerField(blank=True, default=0, null=True)),
                ('year_began_uncertain', models.BooleanField(default=False)),
                ('year_ended_uncertain', models.BooleanField(default=False)),
                ('publication_dates', models.CharField(max_length=255)),
                ('has_barcode', models.BooleanField(default=False)),
                ('has_indicia_frequency', models.BooleanField(default=False)),
                ('has_isbn', models.BooleanField(default=False)),
                ('has_issue_title', models.BooleanField(default=False)),
                ('has_volume', models.BooleanField(default=False)),
                ('has_rating', models.BooleanField(default=False)),
                ('is_current', models.BooleanField(default=False)),
                ('is_comics_publication', models.BooleanField(default=False)),
                ('is_singleton', models.BooleanField(default=False)),
                ('issue_count', models.IntegerField(blank=True, default=0, null=True)),
                ('has_gallery', models.BooleanField(db_index=True, default=False)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('open_reserve', models.IntegerField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('cover_url', models.URLField(max_length=255, blank=True, null=True)),
                ('publication_type_id', models.IntegerField(blank=0, null=True)),
                ('publisher_name', models.CharField(db_index=True, max_length=255)),
                ('country', models.ForeignKey(to='api.GCDCountry')),
                ('images', models.ManyToManyField(to='api.GCDImage')),
                ('language', models.ForeignKey(to='api.GCDLanguage')),
                ('publisher', models.ForeignKey(to='api.GCDPublisher')),
            ],
            options={
                'db_table': 'gcd_series',
                'ordering': ['sort_name', 'year_began'],
            },
        ),
        migrations.CreateModel(
            name='GCDStory',
            fields=[
                ('story_id', models.AutoField(serialize=False, primary_key=True)),
                ('title', models.CharField(max_length=255)),
                ('title_inferred', models.BooleanField(db_index=True, default=False)),
                ('feature', models.CharField(max_length=255)),
                ('sequence_number', models.IntegerField()),
                ('page_count', models.DecimalField(max_digits=10, db_index=True, decimal_places=3, null=True)),
                ('page_count_uncertain', models.BooleanField(db_index=True, default=False)),
                ('script', models.TextField()),
                ('pencils', models.TextField()),
                ('inks', models.TextField()),
                ('colors', models.TextField()),
                ('letters', models.TextField()),
                ('editing', models.TextField()),
                ('no_script', models.BooleanField(db_index=True, default=False)),
                ('no_pencils', models.BooleanField(db_index=True, default=False)),
                ('no_inks', models.BooleanField(db_index=True, default=False)),
                ('no_colors', models.BooleanField(db_index=True, default=False)),
                ('no_letters', models.BooleanField(db_index=True, default=False)),
                ('no_editing', models.BooleanField(db_index=True, default=False)),
                ('job_number', models.CharField(max_length=25)),
                ('genre', models.CharField(max_length=255)),
                ('characters', models.TextField()),
                ('synopsis', models.TextField()),
                ('reprint_notes', models.TextField()),
                ('notes', models.TextField()),
                ('keywords', models.TextField(null=True)),
                ('reserved', models.BooleanField(db_index=True, default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(db_index=True, auto_now=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('issue', models.ForeignKey(to='api.GCDIssue')),
            ],
            options={
                'db_table': 'gcd_stories',
                'ordering': ('sequence_number',),
            },
        ),
        migrations.CreateModel(
            name='GCDStoryType',
            fields=[
                ('story_type_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(db_index=True, unique=True, max_length=50)),
                ('sort_code', models.IntegerField(unique=True)),
            ],
            options={
                'db_table': 'gcd_story_types',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='HelpRequest',
            fields=[
                ('help_id', models.AutoField(serialize=False, primary_key=True)),
                ('subject', models.PositiveSmallIntegerField(choices=[(1, 'Feedback'), (2, 'Error'), (3, 'Checkout'), (4, 'Inventory'), (5, 'Pull List'), (6, 'Sales'), (7, 'Emailing List'), (8, 'Store Settings / Users'), (9, 'Dashboard')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], default=1)),
                ('subject_url', models.URLField(blank=True, null=True)),
                ('message', models.TextField(null=True)),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('employee', models.ForeignKey(to='api.Employee')),
            ],
            options={
                'db_table': 'ec_help_requests',
                'ordering': ('submission_date',),
            },
        ),
        migrations.CreateModel(
            name='ImageUpload',
            fields=[
                ('upload_id', models.AutoField(serialize=False, primary_key=True)),
                ('upload_date', models.DateField(auto_now=True, null=True)),
                ('is_assigned', models.BooleanField(default=False)),
                ('image', models.ImageField(upload_to='upload', blank=True, null=True)),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'db_table': 'ec_image_uploads',
                'ordering': ('upload_date',),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('org_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=127)),
                ('description', models.TextField(blank=True, null=True)),
                ('joined', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('street_name', models.CharField(max_length=63)),
                ('street_number', models.CharField(max_length=31, blank=True, null=True)),
                ('unit_number', models.CharField(max_length=15, blank=True, null=True)),
                ('city', models.CharField(max_length=63)),
                ('province', models.CharField(max_length=63)),
                ('country', models.CharField(max_length=63)),
                ('postal', models.CharField(max_length=31)),
                ('website', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254, blank=True, null=True)),
                ('phone', models.CharField(max_length=31, blank=True, null=True)),
                ('fax', models.CharField(max_length=31, blank=True, null=True)),
                ('twitter_url', models.URLField(blank=True, null=True)),
                ('facebook_url', models.URLField(blank=True, null=True)),
                ('instagram_url', models.URLField(blank=True, null=True)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('github_url', models.URLField(blank=True, null=True)),
                ('google_url', models.URLField(blank=True, null=True)),
                ('youtube_url', models.URLField(blank=True, null=True)),
                ('flickr_url', models.URLField(blank=True, null=True)),
                ('administrator', models.ForeignKey(to=settings.AUTH_USER_MODEL, on_delete=django.db.models.deletion.SET_NULL, null=True)),
                ('customers', models.ManyToManyField(to='api.Customer')),
                ('logo', models.ForeignKey(blank=True, to='api.ImageUpload', on_delete=django.db.models.deletion.SET_NULL, null=True)),
            ],
            options={
                'db_table': 'ec_organizations',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=127, blank=True, null=True)),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Comic'), (2, 'Furniture'), (3, 'Coin')], validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], default=1)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_sold', models.BooleanField(default=False)),
                ('sub_price', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('discount', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('discount_type', models.PositiveSmallIntegerField(choices=[(1, '%'), (2, '$')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2)], default=1)),
                ('price', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('cost', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('brand', models.ForeignKey(blank=True, to='api.Brand', null=True)),
                ('image', models.ForeignKey(blank=True, to='api.ImageUpload', on_delete=django.db.models.deletion.SET_NULL, null=True)),
                ('images', models.ManyToManyField(to='api.ImageUpload', related_name='product_images', blank=True)),
                ('organization', models.ForeignKey(to='api.Organization')),
            ],
            options={
                'db_table': 'ec_products',
                'ordering': ('product_id', 'type'),
            },
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('promotion_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=127)),
                ('discount', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('discount_type', models.PositiveSmallIntegerField(choices=[(1, '%'), (2, '$')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2)], default=1)),
                ('organization', models.ForeignKey(to='api.Organization')),
            ],
            options={
                'db_table': 'ec_promotions',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Pulllist',
            fields=[
                ('pulllist_id', models.AutoField(serialize=False, primary_key=True)),
                ('organization', models.ForeignKey(to='api.Organization')),
                ('series', models.ForeignKey(to='api.GCDSeries', null=True)),
            ],
            options={
                'db_table': 'ec_pulllists',
                'ordering': ('series',),
            },
        ),
        migrations.CreateModel(
            name='PulllistSubscription',
            fields=[
                ('subscription_id', models.AutoField(serialize=False, primary_key=True)),
                ('copies', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1)], default=1)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(to='api.Customer')),
                ('organization', models.ForeignKey(to='api.Organization')),
                ('pulllist', models.ForeignKey(to='api.Pulllist')),
            ],
            options={
                'db_table': 'ec_pulllists_subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('receipt_id', models.AutoField(serialize=False, primary_key=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('has_purchased_online', models.BooleanField(default=False)),
                ('payment_method', models.PositiveSmallIntegerField(choices=[(1, 'Cash'), (2, 'Debit Card'), (3, 'Credit Card'), (4, 'Gift Card'), (5, 'Store Points'), (6, 'Cheque'), (7, 'PayPal'), (8, 'Invoice'), (9, 'Other')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)], default=1)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'New Order'), (2, 'Picked'), (3, 'Shipped'), (4, 'Received'), (5, 'In-Store Sale'), (6, 'Online Sale')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)], default=1)),
                ('products_count', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0)], default=0)),
                ('sub_total', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('discount_amount', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('has_tax', models.BooleanField(default=True)),
                ('tax_rate', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('tax_amount', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('total_amount', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('has_finished', models.BooleanField(default=False)),
                ('has_paid', models.BooleanField(default=False)),
                ('billing_first_name', models.CharField(max_length=63, blank=True, null=True)),
                ('billing_last_name', models.CharField(max_length=63, blank=True, null=True)),
                ('billing_address', models.CharField(max_length=63, blank=True, null=True)),
                ('billing_email', models.EmailField(max_length=254, blank=True, null=True)),
                ('billing_phone', models.CharField(max_length=15, blank=True, null=True)),
                ('billing_city', models.CharField(max_length=63, blank=True, null=True)),
                ('billing_province', models.CharField(max_length=63, blank=True, null=True)),
                ('billing_country', models.CharField(max_length=63, blank=True, null=True)),
                ('billing_postal', models.CharField(max_length=31, blank=True, null=True)),
                ('shipping_first_name', models.CharField(max_length=63, blank=True, null=True)),
                ('shipping_last_name', models.CharField(max_length=63, blank=True, null=True)),
                ('shipping_address', models.CharField(max_length=63, blank=True, null=True)),
                ('shipping_email', models.EmailField(max_length=254, blank=True, null=True)),
                ('shipping_phone', models.CharField(max_length=15, blank=True, null=True)),
                ('shipping_city', models.CharField(max_length=63, blank=True, null=True)),
                ('shipping_province', models.CharField(max_length=63, blank=True, null=True)),
                ('shipping_country', models.CharField(max_length=63, blank=True, null=True)),
                ('shipping_postal', models.CharField(max_length=31, blank=True, null=True)),
                ('customer', models.ForeignKey(blank=True, to='api.Customer', null=True)),
                ('employee', models.ForeignKey(blank=True, to='api.Employee', null=True)),
                ('organization', models.ForeignKey(to='api.Organization')),
            ],
            options={
                'db_table': 'ec_receipts',
                'ordering': ('last_updated',),
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('section_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(db_index=True, max_length=127)),
                ('organization', models.ForeignKey(to='api.Organization')),
            ],
            options={
                'db_table': 'ec_sections',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('store_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=127)),
                ('description', models.TextField(blank=True, null=True)),
                ('joined', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('tax_rate', models.DecimalField(max_digits=10, default=0.13, decimal_places=2)),
                ('street_name', models.CharField(max_length=63)),
                ('street_number', models.CharField(max_length=31, blank=True, null=True)),
                ('unit_number', models.CharField(max_length=15, blank=True, null=True)),
                ('city', models.CharField(max_length=63)),
                ('province', models.CharField(max_length=63)),
                ('country', models.CharField(max_length=63)),
                ('postal', models.CharField(max_length=31)),
                ('website', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254, blank=True, null=True)),
                ('phone', models.CharField(max_length=31, blank=True, null=True)),
                ('fax', models.CharField(max_length=31, blank=True, null=True)),
                ('is_open_monday', models.BooleanField(default=False)),
                ('is_open_tuesday', models.BooleanField(default=False)),
                ('is_open_wednesday', models.BooleanField(default=False)),
                ('is_open_thursday', models.BooleanField(default=False)),
                ('is_open_friday', models.BooleanField(default=False)),
                ('is_open_saturday', models.BooleanField(default=False)),
                ('is_open_sunday', models.BooleanField(default=False)),
                ('monday_to', models.CharField(max_length=7, blank=True, null=True)),
                ('tuesday_to', models.CharField(max_length=7, blank=True, null=True)),
                ('wednesday_to', models.CharField(max_length=7, blank=True, null=True)),
                ('thursday_to', models.CharField(max_length=7, blank=True, null=True)),
                ('friday_to', models.CharField(max_length=7, blank=True, null=True)),
                ('saturday_to', models.CharField(max_length=7, blank=True, null=True)),
                ('sunday_to', models.CharField(max_length=7, blank=True, null=True)),
                ('monday_from', models.CharField(max_length=7, blank=True, null=True)),
                ('tuesday_from', models.CharField(max_length=7, blank=True, null=True)),
                ('wednesday_from', models.CharField(max_length=7, blank=True, null=True)),
                ('thursday_from', models.CharField(max_length=7, blank=True, null=True)),
                ('friday_from', models.CharField(max_length=7, blank=True, null=True)),
                ('saturday_from', models.CharField(max_length=7, blank=True, null=True)),
                ('sunday_from', models.CharField(max_length=7, blank=True, null=True)),
                ('employees', models.ManyToManyField(to='api.Employee')),
                ('logo', models.ForeignKey(blank=True, to='api.ImageUpload', on_delete=django.db.models.deletion.SET_NULL, null=True)),
                ('organization', models.ForeignKey(to='api.Organization')),
            ],
            options={
                'db_table': 'ec_stores',
                'ordering': ('store_id',),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.AutoField(serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=127)),
                ('discount', models.DecimalField(max_digits=10, default=0.0, decimal_places=2)),
                ('discount_type', models.PositiveSmallIntegerField(choices=[(1, '%'), (2, '$')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2)], default=1)),
                ('organization', models.ForeignKey(to='api.Organization')),
            ],
            options={
                'db_table': 'ec_tags',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('wishlist_id', models.AutoField(serialize=False, primary_key=True)),
                ('customer', models.ForeignKey(to='api.Customer')),
                ('products', models.ManyToManyField(to='api.Product')),
            ],
            options={
                'db_table': 'ec_wishlists',
            },
        ),
        migrations.AddField(
            model_name='section',
            name='store',
            field=models.ForeignKey(to='api.Store'),
        ),
        migrations.AddField(
            model_name='receipt',
            name='store',
            field=models.ForeignKey(to='api.Store'),
        ),
        migrations.AddField(
            model_name='pulllist',
            name='store',
            field=models.ForeignKey(to='api.Store'),
        ),
        migrations.AddField(
            model_name='product',
            name='receipt',
            field=models.ForeignKey(blank=True, to='api.Receipt', null=True),
        ),
        migrations.AddField(
            model_name='product',
            name='section',
            field=models.ForeignKey(to='api.Section'),
        ),
        migrations.AddField(
            model_name='product',
            name='store',
            field=models.ForeignKey(to='api.Store'),
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(to='api.Tag', related_name='product_tags', blank=True),
        ),
        migrations.AddField(
            model_name='helprequest',
            name='organization',
            field=models.ForeignKey(to='api.Organization'),
        ),
        migrations.AddField(
            model_name='helprequest',
            name='screenshot',
            field=models.ForeignKey(blank=True, to='api.ImageUpload', null=True),
        ),
        migrations.AddField(
            model_name='helprequest',
            name='store',
            field=models.ForeignKey(to='api.Store'),
        ),
        migrations.AddField(
            model_name='gcdstory',
            name='type',
            field=models.ForeignKey(to='api.GCDStoryType'),
        ),
        migrations.AddField(
            model_name='gcdissue',
            name='series',
            field=models.ForeignKey(to='api.GCDSeries', null=True),
        ),
        migrations.AddField(
            model_name='gcdindiciapublisher',
            name='parent',
            field=models.ForeignKey(to='api.GCDPublisher', null=True),
        ),
        migrations.AddField(
            model_name='gcdbranduse',
            name='publisher',
            field=models.ForeignKey(to='api.GCDPublisher'),
        ),
        migrations.AddField(
            model_name='gcdbrandgroup',
            name='parent',
            field=models.ForeignKey(to='api.GCDPublisher', null=True),
        ),
        migrations.AddField(
            model_name='gcdbrandemblemgroup',
            name='brandgroup',
            field=models.ForeignKey(to='api.GCDBrandGroup', null=True),
        ),
        migrations.AddField(
            model_name='gcdbrand',
            name='group',
            field=models.ManyToManyField(to='api.GCDBrandGroup', db_table='gcd_brand_emblem_group', blank=True),
        ),
        migrations.AddField(
            model_name='gcdbrand',
            name='images',
            field=models.ManyToManyField(to='api.GCDImage'),
        ),
        migrations.AddField(
            model_name='gcdbrand',
            name='parent',
            field=models.ForeignKey(to='api.GCDPublisher', null=True),
        ),
        migrations.AddField(
            model_name='employee',
            name='organization',
            field=models.ForeignKey(to='api.Organization'),
        ),
        migrations.AddField(
            model_name='employee',
            name='profile',
            field=models.ForeignKey(blank=True, to='api.ImageUpload', on_delete=django.db.models.deletion.SET_NULL, null=True),
        ),
        migrations.AddField(
            model_name='employee',
            name='user',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customer',
            name='profile',
            field=models.ForeignKey(blank=True, to='api.ImageUpload', null=True),
        ),
        migrations.AddField(
            model_name='customer',
            name='user',
            field=models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='comic',
            name='issue',
            field=models.ForeignKey(to='api.GCDIssue'),
        ),
        migrations.AddField(
            model_name='comic',
            name='product',
            field=models.ForeignKey(to='api.Product'),
        ),
        migrations.AddField(
            model_name='brand',
            name='organization',
            field=models.ForeignKey(to='api.Organization'),
        ),
    ]
